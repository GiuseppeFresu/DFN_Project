@startuml 

title DFN

' Create package with folder style
package FractureLibrary <<Folder>>
{

class Point {
        + x: double
        + y: double 
        + z: double 
    }

class Fractures{
        + NumberFractures: size_t 
        + FracturesId: vector<unsigned int> 
        + FracturesVertices: vector<Matrix3Xd> 
        + Traces: vector<Trace> 
        + clear()
}


 class Trace {
        + traceId: int
        + fractureId1: int
        + fractureId2: int 
        + p1: Point 
        + p2: Point 
        + Tips1: bool
        + Tips2: bool
        + length: double 
        + Trace(int id, int f1, int f2, Point pt1, Point pt2, bool tips1, bool tips2)
}

class Utils {
+ bool ImportFractures(const string& filename, Fractures& fractures)
+ bool intersection2D(const vector<pair<double, double>>& P, const vector<pair<double, double>>& Q)
+ vector<pair<double, double>> projectsOnPlane(const Matrix3Xd& vertices, const string& plane)
+ bool checkSeparation(const Matrix3Xd& P, const Matrix3Xd& Q)
+ bool isPointOnEdges(const Matrix3Xd& points, const Vector3d& pt)
+ Trace calculateTrace(const Matrix3Xd& P, const Matrix3Xd& Q, int id1, int id2, int& traceId)
+ void checkIntersections(Fractures& fractures, map<int, vector<int>>& intersections)
+ void sortTracesByLength(vector<Trace>& traces)
+ void writeTraces(const Fractures& fractures, const string& filename)
+ void writeResults(const Fractures& fractures, const string& filename)

.. FRACTURESTEST ..

TestImportFractures
TestCheckIntersections
TestWriteTraces
TestSortTracesByLength
TestWriteResults

}

    Trace "2"--o "many" Fractures : has

}

Utils ..> Point: uses
Utils ..> Fractures: uses
Utils ..> Trace: uses



@enduml
